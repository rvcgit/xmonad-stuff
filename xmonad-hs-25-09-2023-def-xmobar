import XMonad
import Data.Monoid
import System.Exit
 
import qualified XMonad.StackSet as W
import qualified Data.Map        as M

import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.SetWMName
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.UrgencyHook
import Graphics.X11.ExtraTypes.XF86
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys)
import XMonad.Util.Scratchpad
import XMonad.Util.Cursor
import XMonad.Util.WorkspaceCompare
import System.IO
import XMonad.Layout.Gaps
import XMonad.Layout.Spacing
import XMonad.Layout.Tabbed
import XMonad.Layout.Minimize
import XMonad.Layout.ThreeColumns
import XMonad.Layout.ResizableTile
import XMonad.Layout.Grid
import XMonad.Layout.Circle
import XMonad.Layout.PerWorkspace (onWorkspace)
import Data.List
import XMonad.Actions.CopyWindow
import XMonad.Actions.CycleWS
import XMonad.Actions.Plane

import XMonad.Prompt
import XMonad.Prompt.RunOrRaise (runOrRaisePrompt)
import XMonad.Prompt.AppendFile (appendFilePrompt)


barFont  = "Inconsolata Nerd Font 9"
barXFont = "FiraCode Nerd Font 8"
xftFont = "xft:FiraCode Nerd Font 8"


mXPConfig :: XPConfig
mXPConfig =
    def             { font                  = barFont
                    --, bgColor               = colorDarkGray
                    --, fgColor               = colorGreen
                    --, bgHLight              = colorGreen
                    --, fgHLight              = colorDarkGray
                    , promptBorderWidth     = 0
                    , height                = 10
                    , historyFilter         = deleteConsecutive
                    }

-- Run or Raise Menu
largeXPConfig :: XPConfig
largeXPConfig = mXPConfig
                { font = xftFont
                , height = 10
                }

-- The preferred terminal program, which is used in a binding below and by
-- certain contrib modules.
--
myTerminal      = "urxvtc"
 
-- Width of the window border in pixels.
--
myBorderWidth   = 1
 
-- modMask lets you specify which modkey you want to use. The default
-- is mod1Mask ("left alt").  You may also consider using mod3Mask
-- ("right alt"), which does not conflict with emacs keybindings. The
-- "windows key" is usually mod4Mask.
--
myModMask       = mod4Mask

 
-- The mask for the numlock key. Numlock status is "masked" from the
-- current modifier status, so the keybindings will work with numlock on or
-- off. You may need to change this on some systems.
--
-- You can find the numlock modifier by running "xmodmap" and looking for a
-- modifier with Num_Lock bound to it:
--
-- > $ xmodmap | grep Num
-- > mod2        Num_Lock (0x4d)
--
-- Set numlockMask = 0 if you don't have a numlock key, or want to treat
-- numlock status separately.
--
-- myNumlockMask   = mod2Mask
 
-- The default number of workspaces (virtual screens) and their names.
-- By default we use numeric strings, but any string may be used as a
-- workspace name. The number of workspaces is determined by the length
-- of this list.
--
-- A tagging example:
--
-- > workspaces = ["web", "irc", "code" ] ++ map show [4..9]
--
myWorkspaces    = [
                   " OnE "," tWo "," ThReE ",
                   " fOuR "," FiVe ", " SiX ",
                   " 7ven ", " E8 ", " 9ine "
                  ]

startupWorkspace = " OnE " -- which workspace do you want to be on after launch?
 
-- Border colors for unfocused and focused windows, respectively.
--
myNormalBorderColor  = "blueviolet"
myFocusedBorderColor = "gold"
 
------------------------------------------------------------------------
-- Key bindings. Add, modify or remove key bindings here.
--
myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $
 
    -- launch a terminal
    [ ((modm .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)
 
    -- launch dmenu
    --, ((modm,               xK_p     ), spawn "dmenu_run -fn -bitstream-*-*-*-*-*-11-*-*-*-*-*-*-*")
    , ((modm,               xK_p     ), spawn "dmenu_recency  -b -i -fn cinnamonroll-12 -nb '#1e1e1e' -nf '#888888' -sb '#FFFF84' -sf '#1e1e1e'")
--    , ((modm .|. controlMask, xK_m     ), spawn "mygtkmenui -- ~/.config/GTKmenu/myGTKmenu.txt")
    , ((modm .|. controlMask, xK_p), spawn "gMenu")
    , ((modm .|. controlMask, xK_m), spawn "rofi -modi drun -lines 12 -padding 18 -width 60 -location 0 -show drun -columns 3 -font 'Comfortaa Light 8'")
    , ((modm,               xK_d     ), runOrRaisePrompt largeXPConfig)
    -- launch gmrun
    , ((modm .|. shiftMask, xK_F2     ), spawn "gmrun")
 
    -- close focused window 
    , ((modm .|. shiftMask, xK_c     ), kill)

    -- open web browser 
    , ((modm .|. controlMask, xK_b     ), spawn "firefox")
    
    -- open filemanager pcmanfm
    , ((modm .|. controlMask, xK_f     ), spawn "pcmanfm")    
 
     -- Rotate through the available layout algorithms
    , ((modm, xK_space ), sendMessage NextLayout)
 
    --  Reset the layouts on the current workspace to default
    , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)
 
    -- Resize viewed windows to the correct size
    , ((modm, xK_n ), refresh)
 
    -- Move focus to the next window
    , ((modm, xK_Tab ), windows W.focusDown)
 
    -- Move focus to the next window
    , ((modm,  xK_j ), windows W.focusDown)
 
    -- Move focus to the previous window
    , ((modm,  xK_k ), windows W.focusUp  )
 
    -- Move focus to the master window
    , ((modm,  xK_o ), windows W.focusMaster  )

    --minimize winwdows
--    , ((modm, xK_m ), withFocused minimizeWindow)
--    , ((modm .|. shiftMask, xK_m ), sendMessage RestoreNextMinimizedWin)
 
    -- Swap the focused window and the master window
    , ((modm,  xK_Return), windows W.swapMaster)
 
    -- Swap the focused window with the next window
    , ((modm .|. shiftMask, xK_j ), windows W.swapDown  )
 
    -- Swap the focused window with the previous window
    , ((modm .|. shiftMask, xK_k ), windows W.swapUp    )
 
    -- Shrink the master area
    , ((modm,  xK_h ), sendMessage Shrink)
 
    -- Expand the master area
    , ((modm,  xK_l ), sendMessage Expand)
 
    -- Push window back into tiling
    , ((modm,  xK_t  ), withFocused $ windows . W.sink)
 
    -- Increment the number of windows in the master area
    , ((modm , xK_comma ), sendMessage (IncMasterN 1))
 
    -- Deincrement the number of windows in the master area
    , ((modm  , xK_period), sendMessage (IncMasterN (-1)))
 
    -- toggle the status bar gap (used with avoidStruts from Hooks.ManageDocks)
    , ((modm , xK_b ), sendMessage ToggleStruts)
 
    -- Quit xmonad
    , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))
 
    -- Restart xmonad
--       , ((modm , xK_q ), spawn "pkill conky dzen2 trayer && restart "xmonad"  True)
    , ((modm , xK_q ), restart "xmonad"  True)

    --lock screen
    , ((modm .|. shiftMask, xK_l ), spawn "i3exit lock")
    --exit options
    , ((modm  , xK_End ), spawn "EXIT")

    -- Shrink tile
    , ((modm, xK_a), sendMessage MirrorShrink)

    -- Expand tile
    , ((modm, xK_z), sendMessage MirrorExpand)

    -- multimedia keys
    -- XF86AudioMute
    , ((0 , xF86XK_AudioMute), spawn "amixer -D pulse set Master toggle")
    -- XF86AudioLowerVolume
    , ((0 , xF86XK_AudioLowerVolume), spawn "amixer -D pulse set Master 5%- unmute")
    -- XF86AudioRaiseVolume
    , ((0 , xF86XK_AudioRaiseVolume), spawn "amixer -D pulse set Master 5%+ unmute")
    --Screen Brightness
--    , ((0 , xF86XK_MonBrightnessDown ), spawn "xbacklight -dec 5")
    , ((0 , xF86XK_MonBrightnessDown ), spawn "light -U 3; notify-send 'brightness down'")
--    , ((0, xF86XK_MonBrightnessUp ), spawn "xbacklight -inc 5")
    , ((0, xF86XK_MonBrightnessUp ), spawn "light -A 3; notify-send 'brightness up'")
    , ((0, xF86XK_AudioPlay ), spawn "mpc toggle;mpdnotify")
    , ((0, xF86XK_AudioNext), spawn "mpc next;mpdnotify")
    , ((0, xF86XK_AudioPrev), spawn "mpc prev;mpdnotify")
    -- screenshot
    , ((0, xK_Print), spawn "sleep 0.2; scrot -s")
    , ((modm, xK_Print), spawn "scrot -d5 xmonad_%T.png -e 'mv $f ~/shots'")
    -- Cycle through Workspace
    , ((modm,  xK_Right),  nextWS)
    , ((modm,  xK_Left),   prevWS)
    , ((modm .|. shiftMask, xK_Right),  shiftToNext)
    , ((modm .|. shiftMask, xK_Left),    shiftToPrev)
    , ((modm,  xK_Up), nextScreen) --For dual monitor setup
    , ((modm,  xK_Down), prevScreen) --For dual monitor setup
    , ((modm .|. shiftMask, xK_Up), shiftNextScreen) --For dual monitor setup
    , ((modm .|. shiftMask, xK_Down),  shiftPrevScreen) --For dual monitor setup
    , ((modm,  xK_z),     toggleWS)
    ]
    ++
       
    --where notSP = (return $ ("SP" /=) . W.tag) :: X (WindowSpace -> Bool)

    -- focus /any/ workspace except scratchpad, even visible

    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_5]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask),  (copy, shiftMask .|. controlMask)]]
    ++
 
    --
    -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
    -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
    --
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
 
toggleStrutsKey XConfig{modMask = modm} = (modm, xK_b )

 
------------------------------------------------------------------------
-- Mouse bindings: default actions bound to mouse events
--
myMouseBindings (XConfig {XMonad.modMask = modMask}) = M.fromList $
 
    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modMask, button1), (\w -> focus w >> mouseMoveWindow w))
 
    -- mod-button2, Raise the window to the top of the stack
    , ((modMask, button2), (\w -> focus w >> windows W.swapMaster))
 
    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modMask, button3), (\w -> focus w >> mouseResizeWindow w))
 
    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]
 
------------------------------------------------------------------------
-- Layouts:
 
-- You can specify and transform your layouts by modifying these values.
-- If you change layout bindings be sure to use 'mod-shift-space' after
-- restarting (with 'mod-q') to reset your layout state to the new
-- defaults, as xmonad preserves your old layout settings by default.
--
-- The available layouts.  Note that each layout is separated by |||,
-- which denotes layout choice.
--
--myGimpLayout = smartBorders(avoidStruts(ThreeColMid 1 (3/100) (3/4)))

myLayout = avoidStruts ( tiled ||| Mirror tiled ||| Full)
  where
     -- default tiling algorithm partitions the screen into two panes
     tiled   = spacing 2 $ gaps [(U,22), (L,2), (R,2), (D,2)] $ ResizableTall nmaster delta ratio []
 
     -- The default number of windows in the master pane
     nmaster = 1
 
     -- Default proportion of screen occupied by master pane
     ratio   = 6/10
 
     -- Percent of screen to increment by when resizing panes
     delta   = 3/100


 
------------------------------------------------------------------------
-- Window rules:
 
-- Execute arbitrary actions and WindowSet manipulations when managing
-- a new window. You can use this to, for example, always float a
-- particular program, or have a client always appear on a particular
-- workspace.
--
-- To find the property name associated with a program, use
-- > xprop | grep WM_CLASS
-- and click on the client you're interested in.
--
-- To match on the WM_NAME, you can use 'title' in the same way that
-- 'className' and 'resource' are used below.
--
myManageHook = composeAll
    [ className =? "Pcmanfm"        --> doF (W.shift " tWo ")
    , className =? "Terminator"     --> doF (W.shift " tWo ")
    , className =? "Gedit"          --> doF (W.shift " fOuR ")
    , className =? "lxappearance"   --> doCenterFloat
    , className =? "Customize Look and Feel" --> doCenterFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore 
    , className =? "gcolor3"        --> doIgnore
    , className =? "oblogout"       --> doIgnore
    , isFullscreen                  --> doFullFloat 
    , className =? "onlyoffice Desktop Editors" --> doF (W.shift " FiVe ")
    , className =? "Gimp-2.10"      --> doF (W.shift " ThReE ")
    , className =? "Gimp"           --> doF (W.shift " ThReE ")
    , className =? "Feh"            --> doF (W.shift " fOuR ")
    , className =? "firefox"        --> doF (W.shift " OnE ")
   , className =? "Navigator"       --> doF (W.shift " OnE ")
      , className =? "Virt-manager" --> doF (W.shift " FiVe ")
    ]
    
 
-- Whether focus follows the mouse pointer.
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True
 
------------------------------------------------------------------------
-- Status bars and logging
 
-- Perform an arbitrary action on each internal state change or X event.
-- See the 'DynamicLog' extension for examples.
--
-- To emulate dwm's status bar
--
-- > logHook = dynamicLogDzen
--
--myLogHook = dynamicLogString myStatusBarPP
    -- >>= xmonadPropLog
-- >> updatePointer (Relative 0.5 0.5)

------------------------------------------------------------------------
-- Startup hook
 
-- Perform an arbitrary action each time xmonad starts or is restarted
-- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- per-workspace layout choices.
--
-- By default, do nothing.
myStartupHook = do
    setWMName "XMonad"
    setDefaultCursor xC_left_ptr
    spawn "$HOME/scripts/startapps_xmonad"
    spawn "synclient HorizTwoFingerScroll=1"
    spawn "mpd"
   
------------------------------------------------------------------------
-- Now run xmonad with all the defaults we set up.
 
-- Run xmonad with the settings you specify. No need to modify this.
--

myPP = xmobarPP { 
  ppCurrent   = xmobarColor "lightsalmon" "" ,
  ppTitle     = (\str -> "" ), 
  ppLayout    = (\str -> ""),
  ppHidden    = (xmobarColor "slategray" ""),
  ppHiddenNoWindows = (\str -> ""),
  ppUrgent    = xmobarColor "indianred" "" ,
  ppOrder     = \(ws:l:r) -> ws:r
}
--- added to set WS issuewithdzen comment out if error return
myLogHook = do
               dynamicLogWithPP myPP
               return ()
 
--myLogHook = return()  -- UNCOMMENT IF BELOW myLogHookreturns error and has to be commented out
--myUrgencyHook = withUrgencyHook dzenUrgencyHook 
--        { args = ["-bg", "yellow", "-fg", "black" ,"-p", "3", "-xs", "1"] }



--main = xmonad =<< statusBar "xmobar ~/.xmonad/statusbar.hs" myPP toggleStrutsKey defaults 

myXmonadBar = "conky -c ~/.xmonad/xmonadWSConky | dzen2 -p -e 'enterslave=grabkeys;leaveslave=ungrabkeys; button4=scrollup;button5=scrolldown; key_Left=scrollup;key_Right=scrolldown; button1=menuexec' -h '18' -ta l -x 5 -y 2 -fn 'Inconsolata Nerd Font:pixelsize=11:antialias=true' -w 290 -expand right"
-- Color of current window title in xmobar.
  -- Used to be #00CC00
xmobarTitleColor = "beige"

-- Color of current workspace in xmobar.
xmobarCurrentWorkspaceColor = "gold"

main = do
--  dzenRightBar <- spawnPipe "~/.xmonad/dzenXmobar" -- Comment out if total xmobar is needed

--  dzenLeftBar <- spawnPipe "xmobar ~/.xmobar-workspaces.hs"   -- xmobar for workspaces + dzen2 for others
--  dzenLeftBar <- spawnPipe myXmonadBar  -- exclusive dzen2bar with myXmonadBar
  xmproc <- spawnPipe "xmobar ~/.xmonad/xmobar.hs"  -- uncomment if total xmobar is needed

  xmonad $ defaults {
         logHook = dynamicLogWithPP $ xmobarPP { -- for total xmobar without dzen2
--      logHook = dynamicLogWithPP $ xmobarPP { -- to be used for exclusively dzen2 bars [ no xmobar]
--      logHook = dynamicLogWithPP $ myPP {  -- to be used for xmobar for workspace and dzen2 for rest
--            ppOutput = hPutStrLn dzenLeftBar -- uncomment if total xmobar is not needed
              ppOutput = hPutStrLn xmproc -- for xmobar.hs with full bar
          , ppTitle = xmobarColor xmobarTitleColor "#1a1e22" . shorten 40
          , ppCurrent = xmobarColor xmobarCurrentWorkspaceColor ""
          , ppHidden = (xmobarColor "#7f7f7f" "")
          , ppSep = "   "
          , ppOrder = \(ws:l:r) -> ws:r
      }
      , manageHook = manageDocks <+> myManageHook
      , startupHook = myStartupHook
  }
-- A structure containing your configuration settings, overriding
-- fields in the default config. Any you don't override, will 
-- use the defaults defined in xmonad/XMonad/Config.hs
-- 
-- No need to modify this.
--
defaults = def {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
--        numlockMask      = myNumlockMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,
 
      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,
 
      -- hooks, layouts
      -- handleEventHook   = ewmhFullscreen,
        layoutHook         = myLayout,
        manageHook         = myManageHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
}
